/* Include directives: */

#include <stdio.h>
#include <stdlib.h>

/* Struct Declarations */

typedef struct vector {
	double *elements;
	int length;
} Vector;

typedef struct matrix {
	double** elements;
	int rows;
	int columns;
} Matrix;

/* Prototype Declarations: */

Matrix CreateMatrix(const int rows, const int columns);
Vector CreateVector(const int length);
void FreeVector(Vector *vector);
void FreeMatrix(Matrix *matrix);
Vector MatrixVectorMultiplication(Matrix matrix, Vector vector);
Vector VectorAddition(Vector vectorA, Vector vectorB);

int main(int argc, char *argv[]){
	double A = 1.0;
	double B = 3.0;
	A = B;
	return EXIT_SUCCESS;
}

Matrix CreateMatrix(const int rows, const int columns) {
	int i;
	Matrix result;
	result.rows = rows;
	result.columns = columns;
	result.elements = (double**) calloc(rows ,sizeof(double*));

	for(i = 0; i < rows; i++){
		result.elements[i] = calloc(columns ,sizeof(double));
	}

	return result;
}

Vector CreateVector(const int length){
	Vector result;
	result.length = length;
	result.elements = (double*) calloc(length ,sizeof(double));

	return result;
}

void FreeVector(Vector *vector){
	free((*vector).elements);
}

void FreeMatrix(Matrix *matrix){
	int i;
	for(i = 0; i < (*matrix).rows; i++){
		free((*matrix).elements[i]);
	}

	free((*matrix).elements);
}

Vector MatrixVectorMultiplication(Matrix matrix, Vectorvector){
	int i, j;
	Vector result = CreateVector(matrix.rows);

	for(i = 0; i < matrix.rows; i++){
		for(j = 0; j < matrix.columns; j++){
			result.elements[i] +=matrix.elements[i][j] *vector.elements[j];
		}
	}

	return result;
}

Vector VectorAddition(Vector vectorA, Vector vectorB){
	int i;
	Vector result = CreateVector(vectorA.length);

	for(i = 0; i < vectorA.length; i++){
		result.elements[i] = vectorA.elements[i] +vectorB.elements[i];
	}
	return result;
}


