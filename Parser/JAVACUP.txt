// CUP specification for a simple expression evaluator (no actions)

import java_cup.runtime.*;

/* Part 1: Preliminaries to set up and use the scanner.  */

init with {: scanner.init();              :};
scan with {: return scanner.next_token(); :};



/* Part 2: Terminals and non-terminals */

/*Terminals (tokens returned by the scanner). */

terminal            SEMI, PLUS, MINUS, DIVIDE, MULT, MOD, COMMA, DOT, LOGOP, MAIN;
terminal            LPAREN, RPAREN, LANGLE, RANGLE, LCURLY, RCURLY, LBRACKET, RBRACKET, END, BEGIN;
terminal			EQUALS, HIGHERTHAN, LOWERTHAN, HIGHEREQ, LOWEREQ, NOTEQ;
terminal			WHILE, IF, THEN, ELSE, ELSEIF, ID, EPSILON, PRINT;
terminal Integer    NUM;
terminal Vector		VECTOR;
terminal Matrix		MATRIX;

/* Non terminals */
non terminal            program, stmts, stmt, dcls, dcl, expr, ctrlstmt, ifstmt, elsestmts;
non terminal			ifelsestmts, printstmt, stringstmt, appendstr, valindex, iterstmt, whilestmt;
non terminal			assignstmt, addexpr, multexpr, primexpr, logstmt, logop, ariop, mulop, newline;

non terminal Integer	num, matrix, vector, id;



/* Part 3: Precedences */

precedence left PLUS, MINUS;
precedence left MULT, DIVIDE, MOD;


/* Part 4: The grammar */

program		::=	dcls stmts END;										

stmts		::=	stmts stmt SEMI;													

stmt		::=	expr															
				|	ctrlstmt														
				|	iterstmt														
				|	assignstmt
				|	printstmt;
				
dcls		::=	dcls dcl;														

dcl			::=	id															
				|	id EQUALS expr												
				|	id EQUALS expr LANGLE vector RANGLE							
				|	id EQUALS expr LANGLE matrix RANGLE;							
				
	
expr		::=	addexpr;															

ctrlstmt	::=	ifstmt;															

ifstmt		::=	IF LPAREN logstmt RPAREN THEN stmts elsestmts END;				

elsestmts	::=	ifelsestmts ELSE stmts END		
				|	ifelsestmts END	
				|	EPSILON;
				
ifelsestmts	::=	ELSEIF LPAREN logstmt RPAREN THEN stmts END
				|	EPSILON;

printstmt	::=	PRINT stringstmt;

stringstmt	::=	stringstmt appendstr
				|	num appendstr
				|	id valindex appendstr
				|	newline appendstr;

appendstr	::=	PLUS stringstmt appendstr
				|	PLUS num appendstr
				|	PLUS id 
				|	PLUS newline appendstr
				|	EPSILON;
				
valindex	::=	LBRACKET num RBRACKET
				|	LBRACKET num COMMA num RBRACKET
				|	EPSILON;
				
iterstmt	::=	whilestmt;											

whilestmt	::=	WHILE LPAREN logstmt RPAREN THEN stmts END;							

assignstmt	::=	id EQUALS expr SEMI;														

addexpr		::=	multexpr													
				|	addexpr ariop multexpr SEMI;												

multexpr	::= 	primexpr													
				|	multexpr mulop primexpr;											
				
primexpr	::=	id																	
				|	num																
				|	LPAREN addexpr RPAREN;										
				
logstmt		::=	addexpr logop addexpr SEMI;

logop		::=			EQUALS
				|	LOWERTHAN
				|	HIGHERTHAN
				|	HIGHEREQ
				|	LOWEREQ
				|	NOTEQ;
				
ariop		::=	PLUS
				|	MINUS;
				
mulop		::=	MULT
				|	DIVIDE
				|	MOD;


